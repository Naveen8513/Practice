Exception Handling 
===================

Q) What is the difference between Exception and Error?

Exception 
---------
	Exception is a problem for which we can provide solution programmatically.
	Exception will raise due to syntax errors.
	ex:
		FileNotFoundException 
		ArithmeticException 
		IllegalArgumentException 

Error
------
	Error is a problem for which we can't provide solution programmatically.
	Error will raise due to lack of system resources.
	ex:
		LinkageError 
		OutOfMemoryError
		StackOverFlowError 

As a part of java application development it is a responsibility of a programmer to provide 
smooth termination for every java program.

We have two types of terminations.

1) Smooth termination / Graceful termination 

2) Abnormal termination 

1) Smooth termination 
----------------------
During the program execution suppose if we are not getting any interruption in the middle of the 
program such type of termination is called smooth termination.

ex:

class  Test 
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}

1) Abnormal termination 
----------------------
During the program execution suppose if we are getting some interruptions in the middle of the 
program such type of termination is called abnormal termination.

ex

class  Test 
{
	public static void main(String[] args) 
	{
		System.out.println(10/0);
	}
}

If any exception raised in our program we must and should handle that exception otherwiser our 
program will terminates abnormally.

Here exception will display name of the exception , description of the exception and line number of 
the exception.


Exception 
===========
It is a unwanted, expected event which disturbs normal flow of our program.

Exceptions always raised at runtime so they are also known as runtime events.

The main objective of exception handling is to provide graceful termination.

In java, Exceptions are divided into two types.

1) Predefined exceptions 

2) Userdefined exception 

1) Predefined exceptions 
--------------------------
Built-In exceptions are called predefined exceptions.

It is categories into two types.

i) Checked exceptions 
--------------------
	Exceptions which are checked by the compiler at the time of compilation are called 
	checked exceptions.
	ex:
		EOFException
		FileNotFoundException
		InterruptedException 

ii) Unchecked exceptions 
------------------------
	Exceptions which are checked by the JVM at the time of runtime are called unchecked
	exceptoins.
	ex:
		ArithmeticException 
		ClassCastException
		IllegalArgumentException

Diagram: java38.1

If any checked exception raised in our program we must and should handle that exception by using try and catch block.


try block
==========
It is a block which contains risky code.

A try block associate with catch block.

If any exception raise in try block then try block won't be executed.

A try block is used to throw the exception to catch block.


catch block
===========
It is a block which contains error handling code.

A catch block always associate with try block.

A catch block is used to catch the exception which is thrown by try block.

If there is no exception in try block then catch block won't be executed.

A catch block will take exception name as a parameter and that name must match with exception class name.

syntax:
-------
	try
	{
		- // Risky Code 
	}
	catch(ArithmeticException ie)
	{
		- // Error Handling Code 
	}


ex:
---
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("try-block");
		}
		catch(Exception e)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	try-block 

ex:2
-----
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	catch-block

ex:3
----
class  Test 
{
	public static void main(String[] args) 
	{
		try
		{
			System.out.println("stmt1");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch(ArithmeticException ae)
		{
			System.out.println("catch-block");
		}
	}
}
o/p:
	stmt1
	catch-block


ex:4
-----
class  Test 
{
	public static void main(String[] args) 
	{
		int i=1;
		
		try
		{
			i++;
		}
		catch(Exception e)
		{
			i++;
		}
		
		System.out.println(i); // 2  
	}
}

A try with multiple catch block
================================
A try block can have multiple catch blocks.

If a try block contains multiple catch block then order of catch blocks are very important. It should be from child to parent but not from parent to child.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println(10/0);
		}
		catch(ArithmeticException ae)
		{
			System.out.println("From AE");
		}
		catch(RuntimeException re)
		{
			System.out.println("From RE");
		}
		catch(Exception e)
		{
			System.out.println("From E");
		}
	}
}

Various ways to display exception details
=========================================
Throwable class defines following three ways to display exception details.

1) printStackTrace()
-------------------
It is used to display name of the exception ,description of the exception and line number of the exception.


2) toString()
--------------
It is used to display name of the exception and description of the exception.


3) getMessage() 
---------------
It is used to display description of the exception.

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println(10/0);
		}
		catch (ArithmeticException ae)
		{
			ae.printStackTrace();
			
			System.out.println("=================");
			
			System.out.println(ae.toString());
			
			System.out.println("=================");
			
			System.out.println(ae.getMessage());
		}
	}
}

finally block
==============
It is never recommanded to maintain cleanup code in try block because if any exception raise in try block then try block won't be executed.

It is never recommanded to maintain cleanup code in catch block because if there is no exception in try block then catch block won't be executed.

But we need a place where we can maintain cleanup code and it should execute irrespective of 
exception raise or not. Such block is called finally block.

syntax:
------
	try
	{
		- // Risky Code 
	}
	catch(Exception e)
	{
		- // Error Handling Code 
	}
	finally
	{
		- // Cleanup code 	
	}

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println("try-block");
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	finally-block

ex:2
----
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println(10/0);
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:7)
	finally-block


ex:3
-----
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println("try-block");
			System.out.println(10/0);
			System.out.println("stmt2");
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}
o/p:
	try-block
	java.lang.ArithmeticException: / by zero
        at Test.main(Test.java:8)
	finally-block

A try with finally combination is valid in java.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{	
		try
		{
			System.out.println("try-block");
		}
		finally
		{
			System.out.println("finally-block");
		}
	}
}

Q) What is the difference between final, finally and finalize method?

final
------
It is a modifier which is applicable for variables,methods and classes.
If we declare any variable as final then reinitialization of that variable is not possible.
If we declare any method as final then overriding of that method is not possible.
If we declare any class as final then creating child class is not possible.

finally
--------
It is a block which contains cleanup code and it should execute irrespective of exception raised or not.

finalize 
---------
It is a method called by garbage collector just before destroying an object for cleanup activity.

throw Statement
===============
Sometimes we will create exception objects explicitly and handover to JVM manually by using throw statement.

ex:
	throw new ArithmeticException("Don't divide by zero");

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{	
		System.out.println(10/0);
	}
}

Here exception object created and handover to JVM by main method.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{	
		throw new ArithmeticException("don't divide by zero");
	}
}

Here exception object created explicitly and handover to JVM manually by using programmer via throw statement.


throws statement
================
If any checked exception raised in our program we must and should handle that exception by using try and catch block or by using throws statement.

ex:
---
class  Test 
{
	public static void main(String[] args) 
	{	
		
		try
		{
			Thread.sleep(3000);
			System.out.println("Welcome to Java");
		}
		catch (InterruptedException ie)
		{
			ie.printStackTrace();
		}
	}
}


ex:
---
class  Test 
{
	public static void main(String[] args)throws InterruptedException  
	{	

			Thread.sleep(5000);
			System.out.println("Welcome to Java");

	}
}












































































































































































































		





