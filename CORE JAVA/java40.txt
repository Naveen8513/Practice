Generics
=========
Arrays are typesafe. We can give guarantee that what type of elements are present in array.

If requirement is there to store String values then it is recommanded to use String array.

ex:
	String[] sarr=new String[5];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	sarr[3]=10;  // invalid 

At the time of retrieving the data from array we don't need to perform typecasting.

ex:
	String[] sarr=new String[5];
	sarr[0]="hi";
	sarr[1]="hello";
	sarr[2]="bye";
	-
	-
	String value=sarr[0];

Collections are not typesafe. We can't give guarantee that what type of elements are present in 
Collections.

If requirement is there to store String values then it is never recommanded to use ArrayList because we won't get any compile time error or runtime error but sometimes our program get failure.

ex:
	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add(10);


AT the time of retrieving the data from Collection , compulsary we need to perform typecasting.

ex:

	ArrayList al=new ArrayList();
	al.add("hi");
	al.add("hello");
	al.add(10);
	-
	-
	String value=(String)al.get(0);	

To overcome this above limitations Sun Micro System introduced Generics concept in 1.5v.

The main objective of generics are.

1) To make Collections as typesafe.

2) To avoid typecasting problem.




java.util package
=================

Q) What is the difference between Arrays and Collections ?

Arrays						Collections
-------------					----------------
It is a collection of homogeneous data 		It is a collection of homogeneous and hetrogeneous 
elements.					data elements.

It is fixed in size.				It is growable in nature.

Performance point of view arrays are 		Memory point of view Collections are recommanded 
recommanded to use.				to use.

Arrays are not implemented based on data 	Collections are implemented based on data structure
structure concept.Hence we can't expect 	concept.Hence we can expect ready made methods.
any readymade methods.

Arrays can hold primitive types and object 	Collections can hold only object types.
types.



Collection Framework
=====================
Collection framework defines several classes and interfaces to represent group of individual objects.


Collection 
============
It is a root interface for entire Collection Framework.

If we want to represent group of individual objects in a single entity then we need to use Collection.

Collection interface contains following methods which are applicable for entire Collection objects.

ex:
	cmd> javap java.util.Collection

	ex:
	public abstract int size();
 	public abstract boolean isEmpty();
  	public abstract boolean contains(java.lang.Object);
  	public abstract java.util.Iterator<E> iterator();
  	public abstract java.lang.Object[] toArray();
  	public abstract boolean add(E);
  	public abstract boolean remove(java.lang.Object);
  	public abstract boolean containsAll(java.util.Collection<?>);
  	public abstract boolean addAll(java.util.Collection<? extends E>);
  	public abstract boolean removeAll(java.util.Collection<?>);
	and etc..



Q) What is the difference between Collection and Collections? 
 
Collection 					Collections 
--------------					------------
It is a root interface for entire collection 	It is a utility class. 
framework. 

It is used to represent a group of individual 	It defines several utility methods that are 
objects in a single unit. 			used to operate on collection.	

It contains abstract methods, static 		It contains only static methods.
methods and default methods. 


Q) Write a java program to display the string in a sorting order?

input:
	ball  cat  dog  apple elephant 

output:
	apple  ball  cat  dog  elephant 

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		String str="ball cat dog apple elephant";
		
		String[] sarr=str.split(" ");
		
		ArrayList al=new ArrayList();
		
		//for each loop
		for(String s:sarr)
		{
			al.add(s);
		}
		
		Collections.sort(al);
		
		al.forEach(element -> System.out.print(element+" "));
		
	}
}


List
====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects 
are allowed and order is preserved then we need to use List interface.

Diagram: java40.1


ArrayList 
==========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

If our frequent operation is a retrieval operation then ArrayList is a best choice.

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList al=new ArrayList();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(10);
		System.out.println(al);//[one,two,three,one,10]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,10,null]
		
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		System.out.println(al);//[one,two,three]
		
		al.add("one");
		System.out.println(al);//[one,two,three,one]
		
		al.add(null);
		System.out.println(al);//[one,two,three,one,null]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		System.out.println(al.isEmpty()); // false 
		
		for(int i=0;i<al.size();i++)
		{
			String s=al.get(i);
			System.out.println(s);
		}
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		ArrayList<String> al=new ArrayList<String>();
		al.add("one");
		al.add("two");
		al.add("three");
		
		al.add(1,"gogo");
		
		System.out.println(al); //[one,gogo,two,three]
		
		System.out.println(al.contains("gogo")); // true 
		
		al.remove("gogo");
		
		System.out.println(al);//[one,two,three]
		
		al.clear();
		
		System.out.println(al);//[]
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=new ArrayList<String>();
		
		list.add("one");
		
		list.add("two");
		
		list.add("three");
		
		System.out.println(list);
		
	}
}


ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<String> list=Arrays.asList("one","two","three","four");
		
		list.forEach(element -> System.out.print(element+" "));
	}
}

ex:
--
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		List<Integer> list=Arrays.asList(6,3,9,1,4);
		
		list.forEach(element -> System.out.print(element+" "));
	}
}

LinkedList 
===========
The underlying data structure is doubly LinkedList.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and Deque interface.

If our frequent operation is adding and removing in the middle then LinkedList is a best choice.

LinkedList class contains following methods.

ex:
	public E getFirst();
  	public E getLast();
 	public E removeFirst();
  	public E removeLast();
  	public void addFirst(E);
  	public void addLast(E);

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList ll=new LinkedList();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		System.out.println(ll);//[one,two,three]
		
		ll.add("one");
		System.out.println(ll);//[one,two,three,one]
		
		ll.add(10);
		System.out.println(ll);//[one,two,three,one,10]
		
		ll.add(null);
		System.out.println(ll);//[one,two,three,one,10,null]
		
		
	}
}

ex:
---
import java.util.*;
class Test  
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll=new LinkedList<String>();
		ll.add("one");
		ll.add("two");
		ll.add("three");
		
		ll.addFirst("gogo");
		ll.addLast("jojo");
		
		System.out.println(ll);//[gogo,one,three,three,jojo]
		
		System.out.println(ll.getFirst());//gogo
		System.out.println(ll.getLast());//jojo
		
		ll.removeFirst();
		ll.removeLast();
		
		System.out.println(ll); //[one,two,three]		
	}
}















































































































