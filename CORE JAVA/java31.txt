Interface
=========
Interface is a collection of zero or more abstract methods.

Abstract methods are incomplete methods becauase they ends with semicolon and does not have any body.

ex:
	void m1();

By default every abstract method is a public and abstract.

ex:
	public abstract void m1();

It is not possible to create object for interfaces.

To write the implementation of abstract methods of an interface we will use implementation class.

It is possible to create object for implementation class because it contains method with body.

Interface contains constants i.e public static final.

syntax:
-------
	interface  <interface_name>
	{
		- //abstract methods	
		- //constants 
	}

If we know service requirement specification then we need to use interface.

Diagram: java31.1


ex:
----
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}


ex:
---
interface A 
{
	public abstract void m1();
}

class Test 
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}

If interface contains four methods then we need to override all four methods.

ex:
---

interface A 
{
	public abstract void see();
	public void show();
	abstract void view();
	void display();
}
class B implements A 
{ 
	public void see()
	{
		System.out.println("See Method");
	}
	public void show()
	{
		System.out.println("Show Method");
	}
	public void view()
	{
		System.out.println("View Method");
	}
	public void display()
	{
		System.out.println("Display Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A a =new B();
		
		a.show();
		a.see();
		a.view();
		a.display();
	}
}

In java, a class can't extends more then one class.

But interface can extends more then one interface.

ex:

interface A 
{
	void m1();
}
interface B 
{
	void m2();
}
interface C extends A,B
{
	void m3();
}
class D implements C 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
	public void m3()
	{
		System.out.println("M3-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		C c=new D();
		c.m1();
		c.m2();
		c.m3();
	}
}

A class can implements more then one interface.

ex:

interface Father 
{
	float HT=6.2f;
	void height();
}
interface Mother 
{
	float HT=5.8f;
	void height();
}
class Child implements Father,Mother
{
	public void height()
	{
		float height=(Father.HT+Mother.HT)/2;
		System.out.println("Child Height :"+height);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Child c=new Child();
		c.height();
	}
}

Note:
-----
From Java 8 version, Interface is a collection of abstract methods, default methods and static methods.


Q) What is marker interface?

Interface which does not contains any methods or constants is called marker interface

In general , Empty interface is called marker interface.

By using marker interface we will get some ability to do.

We have following list of marker interfaces.

ex:
	Serializable 
	Cloneable 
	Remote 
	and etc.

ex:
---
class Item implements java.io.Serializable
{
	private int itemId;
	private String itemName;
	private double itemPrice;

	Item(int itemId,String itemName,doule itemPrice)	
	{
		this.itemId=itemId;
		this.itemName=itemName;
		this.itemPrice=itemPrice;
	}		
	public int getItemId()
	{	
		return itemId;
	}
	public String getItemName()
	{	
		return itemName;
	}
	public double getItemPrice()
	{	
		return itemPrice;
	}	
}








































































































