Abstract class
==============
Abstract class is a collection of zero or more abstract methods and concrete methods.

A abstract keyword is applicable for methods and classes but not for variables.

It is not possible to create object for abstract classes.

To write the implementation of abstract methods of an abstract class we will use sub classes.

By default every abstract method is a public and abstract.

Abstract class contains only instance variables.

syntax:
-----
	abstract  class  class_name
	{
		-
		- // abstract methods 
		- // concrete methods 
		- // instance variables 
	}

If we know partial implementation then we need to use abstract class.

ex:
----
abstract class Plan 
{
	//instance variable
	protected double rate;
	
	//abstract method
	public abstract void getRate();
	
	//concrete method
	public void calculateBillAmt(int units)
	{
		System.out.println("Total Units :"+units);
		System.out.println("Total Bill :"+rate*units);
	}
}
class DomesticPlan extends Plan 
{
	public void getRate()
	{
		rate=2.5d;
	}
}
class CommercialPlan extends Plan
{
	public void getRate()
	{
		rate=5.0d;
	}
}
class Test
{
	public static void main(String[] args)
	{
		DomesticPlan dp=new DomesticPlan();
		dp.getRate();
		dp.calculateBillAmt(250);
		
		CommercialPlan cp=new CommercialPlan();
		cp.getRate();
		cp.calculateBillAmt(250);
	}
}



Abstraction example
===================
abstract class Shape
{
	public abstract void draw();
}
class Rectangle extends Shape
{
	public void draw()
	{
		System.out.println("I draw rectangle");
	}
}
class Test
{
	public static void main(String[] args)
	{
		Rectangle rect=new Rectangle();
		rect.draw();
	}
}


Q) What is the difference between interface and abstract class?

interface					abstract class
--------------					-----------------
To declare interface we will use interface 	To declare abstract class we will use abstract 
keyword.					keyword. 

It is a collection of abstract methods,		It is a collection of abstract methods and   
default methods and static methods.		concrete methods.

Multiple inheritence is possible.		Multiple inheritance is not possible.

It contains constants.				It contains instance variables.

It does not allow constructors.			It allows constructors.

It does not allow blocks.			It allows blocks.

To write the implementation of abstract 	To write the implementation of abstract methods
methods we will use implementation class.	we will use sub class.

If we know only specification then we need to 	If we know partial implementation then we need to use 
use interface.					abstract class.



API
=====
API stands for Application Programming Interface.

It is a base for the programmer to develop software applications.

It is a collection of packages.

In java, We have three types of API's.

1) Predefined API 
------------------
	Built-In API is called predefined API.
	ex:
		https://docs.oracle.com/javase/8/docs/api/		

2) Userdefined API 
-------------------
	API created by the user based on the application requirements.	


3) Third party API 
-----------------
	API which is given by third party vendor.
	ex:
		JAVAZOOM API
		iText API 
		and etc.


Package
========
A package is a collection of classes, interfaces , enums and annotations.

Here enum is a special class and annotation is a special interface.

In general, a package is a collection of classes and interfaces.

A package is also known as folder or a directory.

In java, we have two types of packages.

1) Predefined packages 

2) Userdefined packages 

1) Predefined packages 
------------------------
Built-In packages are called predefined packages.
ex:
	java.lang
	java.io
	java.util
	java.time 
	java.util.stream
	java.text
	java.sql
	javax.servlet
	and etc.

2) Userdefined packages 
------------------------
Packages which are created by the user based on the application requirements are called userdefined packages.

We can declare userdefined package as follow.

syntax:
	package   package_name;

It is always recommanded to declare a package name in the reverse order of url.

ex:
	package  com.google.www;

ex:
---
package com.ihub.www;
import java.util.Calendar;
class Test
{
	public static void main(String[] args)
	{
			Calendar c=Calendar.getInstance();	
			int h=c.get(Calendar.HOUR_OF_DAY);
			
			if(h<12)
				System.out.println("Good Morning");
			else if(h<16)
				System.out.println("Good Afternoon");
			else if(h<20)
				System.out.println("Good Evening");
			else
				System.out.println("Good Night");
	}
}

We can compile above program by using below command.
ex:

		current directory 
			|
	javac   -d     .    Test.java
		|
	destination folder 


We can run above program by using below command.
ex:
	java    com.ihub.www.Test 
			|     |
		packagename  classname 


Singleton class
================
A class which allows us to create only one object is called singleton class.

It  is a design pattern that ensures that a class can only have one object.

If we call any method by using class name and that method returns same class object is called singleton class.

ex:
	Calendar c=Calendar.getInstance();
	LocalDate d=LocalDate.now();
	LocalTime t=LocalTime.now();

To create a singleton class, we required private constructor and static method.

ex:
---
class Singleton 
{
	static Singleton  singleton=null;
	
	//private constructor
	private Singleton()
	{
	}
	
	//static method
	public static Singleton getInstance()
	{
		if(singleton==null)
		{
			singleton=new Singleton();
		}
		
		return singleton;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Singleton s1=Singleton.getInstance();
		System.out.println(s1.hashCode());
		
		Singleton s2=Singleton.getInstance();
		System.out.println(s2.hashCode());
	}
}

Inner classes
==============
Sometimes we will declare a class inside another class such concept is called inner class.

ex:
	class Outer
	{
		class Inner
		{
			-
			- //code to be execute
			-
		}
	}

Inner classes introduced as a part of event handling to remove GUI bugs. 

But due to powerful features and benefits of inner classes, programmers started to use 
inner classes in our regular programming.


Accessing inner class data from static area of outer class
--------------------------------------------------------
class Outer
{
	class Inner
	{
		//non-static method
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}
	
	public static void main(String[] args)
	{
		Outer.Inner i=new Outer().new Inner();
		i.m1();
	}
	
}
Note:
-----
	If we compile above program we will get two .class files i.e 
	Outer.class and Outer$Inner.class.


ex:
---
class Outer
{
	class Inner
	{
		//non-static method
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}
	
	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}
	
}


Inner class does not allow static declaration.

ex:
---
class Outer
{
	class Inner
	{
		//static method
		public static void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}
	
	public static void main(String[] args)
	{
		new Outer().new Inner().m1();
	}	
}
o/p:
	C.T.E :  Illegal static declaration in inner class


Accessing inner class data from non-static area of outer class
---------------------------------------------------------------
class Outer
{
	class Inner
	{
		//non-static method
		public void m1()
		{
			System.out.println("Inner-M1 Method");
		}
	}
	
	public void m2()
	{
		Inner i=new Inner();
		i.m1();
	}
	
	public static void main(String[] args)
	{
		Outer o=new Outer();
		o.m2();
	}
	
}






























































