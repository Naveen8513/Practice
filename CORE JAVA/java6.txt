Java
======
Version		:	Java 8 

Software	:	JDK 11	

Creator		:	James Gosling 

Vendor		:	Oracle Corporation 

Open source	:	Open source 

Website		:	www.oracle.com/in/java

Download link   : 

https://drive.google.com/file/d/1GtRLHXK4y3s97BH2UcYiJPNBaROR1DBV/view?usp=drive_link


Steps to setup environmental variables
=======================================
step1:
------
	Make sure JDK 11 installed successfully.


step2:
-----
	Copy "lib" directory from java_home folder.
	ex:
		C:\Program Files\Java\jdk-11\lib

step3:
------
	Paste "lib" directory in environmental variables.
	ex:
		Right click to My PC --> properties --> Advanced System settings -->
		Environmental variables ---> 

		user variables  --> click to new button
		variable name :  CLASSPATH
		variable value : C:\Program Files\Java\jdk-11\lib; ---> ok.

		system variables --> click to new button 
		variable name : path 
		variable value : C:\Program Files\Java\jdk-11\bin; --> ok --> ok --> ok.


step4:
-----
	Test the environment setup done perfectly or not.
	ex:
		cmd> javap 
		cmd> java  -version 
	

Steps to develop first Java application 
=======================================
step1:
------
	Make sure JDK 11 installed successfully.


step2:
-----
	Make sure environmental setup done perfectly.

step3:
-----
	Create a "javaprog" folder inside 'E' drive.

step4:
-----
	Open the notepad and develop simple Hello World program.
	ex:
		class  Test
		{
			public static void main(String[] args)
			{
				System.out.println("Hello World");
			}
		}

step5:
------
	Save above program by using same name as class name inside "javaprog" location.	


step6:
------
	Open the command prompt from javaprog location.

step7:
-----
	Compile java program by using below command.
	ex:
		javac  Test.java 
			|
			file name 

step8:
-----
	Run java program by using below command.
	ex:
		java    Test
			| 
			class name 	



Internal Architecture of JVM
=============================
Diagram: java6.1

Java program contains java code instructions. Once if we compiled , our java code instructions convert to byte code instructions in .class file.

JVM will invoke one module called classloader or subsystem to load all the byte code instructions from .class file. The work of classloader is to check , these byte code instructions are proper or not. If they are not proper then it will refuse the execution. If they are proper then it will allocates the memories.

We have five types of memories.

1) Method Area 
-------------
It contains code of a class, code of a variable and code of a method.

2) Heap 
--------
Our object creations will store in heap area.

3) Java Stack 
-------------
Java methods stored in method area. But to execute those methods we required some memory and that memory will be allocated in Java Stack.


4) PC Register 
--------------
It is a program counter register which is used to track the address of an instructions.

5) Native Method Stack 
-----------------------
Java methods execute in method area.
Similarly native methods execute in native method stack.
But we can't execute native methods directly.We required a program called Native method interface.

Execution engine
---------------
Execution engine contains interpreter and JIT compiler.

Whenever JVM loads byte code instructions from .class file , it uses interpreter and JIT compiler simultenously.

Interpreter is used to execute our program line by line procedure.

JIT compiler is used to increase the execution speed of our program.

Atlast ,JVM converts our byte code converts to machine code and that code execute in OS. 


Interview Questions
===================

Q) What is Native Method in java?

A method which is developed by using some other language is called native method.


Q) What is JIT compiler?

JIT compiler is a part of a JVM which is used to increase the execution speed of our program.



Q) How many memories are there in java?

We have five memories in java.

1) Method Area 
2) Heap 
3) Java Stack 
4) PC Register 
5) Native Method Stack 



Q)How many classloaders are there in java?

We have three predefined classloaders in java.

1) Bootstrap classloader 

2) Extension classloader 

3) System/Application classloader 














































































































	

































