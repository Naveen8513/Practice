constructors
============
A constructor is a special method which is used to initialized an object.

Having same name as class name is called constructor.

Constructor will call when we create an object.

A constructor will accept following modifiers.

ex:
	default
	public
	private 
	protected 

A constructor does not allow any returntype. 

In java , constructors are divided into two types.

1) Userdefined constructor

2) Default constructor 

1) Userdefined constructor
-------------------------
If a constructor is created by the user based on the application requirement is 
called user defined constructor.

It is classified into two types.

i) Zero Argument constructor 

ii) Parameterized constructor 


i) Zero Argument constructor 
-----------------------------
Suppose if we are not passing any argument to userdefined constructor then that constructor 
is called 0-arg constructor.

ex:
---
class Test  
{
	Test()
	{
		System.out.println("0-arg const");	
	}
	
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
	}
}
o/p:
	main-method

ex:
---
class Test  
{
	public Test()
	{
		System.out.println("0-arg const");	
	}
	
	public static void main(String[] args) 
	{	
		System.out.println("main-method");
		Test t=new Test();
	}
}
o/p:
	main-method
	0-arg const 

ex:
---
class Test  
{
	private Test()
	{
		System.out.println("0-arg const");	
	}
	
	public static void main(String[] args) 
	{	
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	0-arg const 
	main-method
	0-arg const 

ex:
---
class Test  
{
	protected Test()
	{
		System.out.println("0-arg const");	
	}
	
	public static void main(String[] args) 
	{	
		Test t1=new Test();
		System.out.println("main-method");
		Test t2=new Test();
	}
}
o/p:
	0-arg const 
	main-method
	0-arg const 


ii) Parameterized constructor 
-------------------------
Suppose if we are passing atleast one argument to userdefined constructor then that constructor 
is called parameterized constructor.

ex:

class Employee 
{
	//current class variables 
	private int empId;
	private String empName;
	private double empSal;
	
	public Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	public void getEmployeeDetails()
	{
		System.out.println("Employee Id :"+empId);
		System.out.println("Employee Name :"+empName);
		System.out.println("Employee Salary :"+empSal);
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Employee e=new Employee(101,"Alan Morries",1000d);
		e.getEmployeeDetails();
	}
}


2) Default constructor 
------------------------
It is a compiler generated constructor for every java program where we are not defining 
atleast zero argument constructor.

To see the default constructor we need to run below command.

ex:
	cmd> javac  Test.java
	cmd> javap  -c  Test  

Diagram: java30.1


Q) What is constructor overloading?

Having same constructor name with different parameters in a single class is called 
constructor overloading.

ex:

class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		System.out.println("int-arg const");
	}
	A(double d)
	{
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a1=new A();
		A a2=new A(10);
		A a3=new A(10.5d);
	}
}


this keyword
=============
A this keyword is a java keyword which is used to refer current class object reference.

We can utilize this keyword in following ways.

1) To refer current class variables 

2) To refer current class methods 

3) To refer current class constructors 


1) To refer current class variables 
------------------------------------
class A 
{
	int i=10;
	int j=20;
	A(int i,int j)
	{
		System.out.println(i+" "+j); //  100  200
		System.out.println(this.i+" "+this.j); //10  20
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a =new A(100,200);
	}
}

2) To refer current class methods
---------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
		this.m2();
	}
	public void m2()
	{
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A();
		a.m1();
	}
}

3) To refer current class constructors 
------------------------------------
class A 
{
	A()
	{
		System.out.println("0-arg const");
	}
	A(int i)
	{
		this();
		System.out.println("int-arg const");
	}
	A(double d)
	{
		this(10);
		System.out.println("double-arg const");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		A a=new A(10.5d);
	}
}

super keyword
===============
A super keyword is a java keyword which is used to refer super class object reference.

We can utilize super keyword in following ways.

1) To refer super class variables

2) To refer super class methods 

3) To refer super class constructors 



1) To refer super class variables
-----------------------------------
class A 
{
	int i=10;
	int j=20;
}
class B extends A
{
	int i=100;
	int j=200;
	B(int i,int j)
	{
		System.out.println(this.i+" "+this.j); //100  200 
		System.out.println(super.i+" "+super.j); //10  20
		System.out.println(i+" "+j); // 1000 2000
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B(1000,2000);	
	}
}

2) To refer super class methods 
-------------------------------
class A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class B extends A
{
	public void m2()
	{
		super.m1();
		System.out.println("M2-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
		b.m2();
	}
}

3) To refer super class constructors 
-------------------------------------
class A 
{
	A()
	{
		System.out.println("A constructor");
	}
}
class B extends A
{
	B()
	{
		super();
		System.out.println("B constructor");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		B b=new B();
	}

}


Has-A relationship example
===========================
class Customer
{
	private int custId;
	private String custName;
	private Address address;
	public Customer(int custId,String custName,Address address)
	{
		this.custId=custId;
		this.custName=custName;
		this.address=address;
	}
	public int getCustId()
	{
		return custId;
	}
	public String getCustName()
	{
		return custName;
	}
	public Address getAddress()
	{
		return address;
	}
}
class Address
{
	private String houseNo;
	private String locality;
	private String city;
	public Address(String houseNo,String locality,String city)
	{
		this.houseNo=houseNo;
		this.locality=locality;
		this.city=city;
	}
	public String getHouseNo()
	{
		return houseNo;
	}
	public String getLocality()
	{
		return locality;
	}
	public String getCity()
	{
		return city;
	}
	
	public String toString()
	{
		return houseNo+" "+locality+" "+city;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Address add=new Address("1-4-65/1/A","Ameerpet","Hyderabad");
		
		Customer cust=new Customer(101,"Alan",add);
		
		System.out.println(cust.getCustId());
		System.out.println(cust.getCustName());
		System.out.println(cust.getAddress());
		
	}
}



































































































































































































































