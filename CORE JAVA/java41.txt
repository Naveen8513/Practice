import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedList<String> ll1=new LinkedList<String>();
		ll1.add("one");
		ll1.add("two");
		ll1.add("three");
		System.out.println(ll1);//[one,two,three]
		
		LinkedList<String> ll2=new LinkedList<String>();
		ll2.add("raja");
		System.out.println(ll2);//[raja]
		
		ll2.addAll(ll1);
		System.out.println(ll2);//[raja,one,two,three]
		
		System.out.println(ll2.containsAll(ll1)); // true 
		
		ll2.removeAll(ll1);
		System.out.println(ll2);//[raja]
		
	}
}

Vector
========
The underlying data structure is resizable array or growable array.

Duplicate objects are allowed.

Insertion order is preserved.

Hetrogeneous objects are allowed.

Null insertion is possible.

It implements Serializable, Cloneable and RandomAccess interface.

Vector contains synchronized methods.Hence it is thread safe.

Vector class contains following methods.
ex:
	addElement()
	firstElement()
	lastElement()
	removeElementAt()
	removeAllElements()
	and etc.

ex:
----
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity()); // 10
		
		for(int i=1;i<=10;i++)
		{
			v.addElement(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.firstElement());//1
		System.out.println(v.lastElement());//10
		
		v.removeElementAt(5);
		System.out.println(v);//[1,2,3,4,5,7,8,9,10]
		
		v.insertElementAt(100,5);
		System.out.println(v);
		
		v.removeAllElements();
		System.out.println(v); //[]
		
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Vector<Integer> v=new Vector<Integer>();
		System.out.println(v.capacity()); // 10
		
		for(int i=1;i<=10;i++)
		{
			v.add(i);
		}
		System.out.println(v);//[1,2,3,4,5,6,7,8,9,10]
		
		System.out.println(v.get(0));//1
		System.out.println(v.get(v.size()-1));//10
		
		v.remove(5);
		System.out.println(v);//[1,2,3,4,5,7,8,9,10]
		
		v.add(5,100);
		System.out.println(v);
		
		v.clear();
		System.out.println(v); //[]
		
	}
}

Q) What is the difference between ArrayList and Vector?

ArrayList 				Vector
-----------				--------
No method is synchronized 		All methods are synchronized.

At a time multiple Threads are allow to At a time only one Thread is allow to operate 
operate on ArrayList object and hence   on Vector object and hence Vector object is 
ArrayList object is not Thread safe. 	Thread safe.


Relatively performance is high because  Relatively performance is low because
Threads are not required to wait.	Threads are required to wait.

 It is non legacy and introduced in 	It is legacy and introduced in 1.0v
1.2v. 


Q) What is the difference between ArrayList and LinkedList?

ArrayList 					LinkedList
-------------					----------
The underlying data structure is resizable 	The underlying data structure is doubly 
array or growable array.			linked list.


ArrayList is better for storing and accessing 	LinkedList is better for manipulating data.
data.

The memory location for the elements of 	The memory location for the elements of a linked list 
an ArrayList is contiguous.			is not contiguous.

When an ArrayList is initialized, a default 	There is no case of default capacity in a LinkedList.
capacity of 10 is assigned to the ArrayList.

Stack
======
It is a child class of Vector class.

If we depends upon Last In First Out order then we need to use Stack.

constructor
----------
	Stack s=new Stack();

methods
-------
1) push(Object o)
-----------------
	It is used to push the element in a stack. 

2) pop()
---------
	It is used to pop the element from stack.

3) peek()
---------
	It returns toppest element from stack.

4) isEmpty()
-----------
	It is used to check stack is empty or not.

5) Search(Object o)
-------------------
	It will return offset value if element is found otherwise it will return -1.


ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		Stack<String> s=new Stack<String>();
		s.push("A");
		s.push("B");
		s.push("C");
		System.out.println(s);//[A,B,C]
		
		s.pop();
		System.out.println(s);//[A,B]
		
		System.out.println(s.peek()); // B 
		
		System.out.println(s.isEmpty());//false
		
		System.out.println(s.search("Z")); // -1
		
		System.out.println(s.search("A"));// 2
	}
}



Set 
=====
It is a child interface of Collection interface.

If we want to represent group of individual objects in a single entity where duplicate objects are 
not allowed and order is not preserved then we need to use Set interface.

Diagram: java41.1


HashSet
========
The underlying data structure is Hashtable.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take hash code of an object.

Hetrogeneous objects are allowed.

Null insertion is possible.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		HashSet hs=new HashSet();
		hs.add("nine");
		hs.add("one");
		hs.add("six");
		System.out.println(hs);//[nine, six, one]
		
		hs.add("one");
		System.out.println(hs);//[nine, six, one]
		
		hs.add(10);
		System.out.println(hs);//[nine, six, one, 10]
		
		hs.add(null);
		System.out.println(hs);//[null, nine, six, one, 10]
	}
}





LinkedHashSet
==============
LinkedHashSet is a child class of HashSet class.

LinkedHashSet is exactly same as HashSet class with following differences.

ex:

HashSet						LinkedHashSet
-----------					---------------
The underlying data structure is Hashtable.	The underlying data  structure is Hashtable and 
						LinkedList.

Insertion order is not preserved.		Insertion order is preserved.

It is introduced in 1.2v.			It is introduced in 1.4v.


ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		LinkedHashSet lhs=new LinkedHashSet();
		lhs.add("nine");
		lhs.add("one");
		lhs.add("six");
		System.out.println(lhs);//[nine, one, six]
		
		lhs.add("one");
		System.out.println(lhs);//[nine, one, six]
		
		lhs.add(10);
		System.out.println(lhs);//[nine, one, six, 10]
		
		lhs.add(null);
		System.out.println(lhs);//[nine, one, six, 10, null]
	}
}

TreeSet
=======
The underlying data structure is Balanced Tree.

Duplicate objects are not allowed.

Insertion order is not preserved because it will take sorting order of an object.

Hetrogeneous objects are not allowed. 

If we insert hetrogeneous object then we will get runtime exception called ClassCastException.

Null insertion is not possible.

If we insert null then we will get NullPointerException.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet ts=new TreeSet();
		ts.add(10);
		ts.add(1);
		ts.add(5);
		ts.add(3);
		System.out.println(ts);//[1, 3, 5, 10]
		
		ts.add(1);
		System.out.println(ts);//[1, 3, 5, 10]
		
		//ts.add("hi");
		//System.out.println(ts); // R.E ClassCastException
	
		//ts.add(null);
		//System.out.println(ts); // R.E NullPointerException 
	}
}


Q) What is the difference between Comparable and Comparator interface?

Comparable 
-----------
Comparable is an interface which is present in java.lang package.

It contains only one method i.e compareTo() method.

If we depends upon default natural sorting order then we need to use Comparable interface.

ex:
	obj1.compareTo(obj2)
	
	It will return -ve if obj1 comes before obj2.
	It will return +ve if obj1 comes after obj2.
	it will return 0 if both objects are same.

ex:
---

class Test 
{
	public static void main(String[] args) 
	{
		System.out.println("A".compareTo("Z"));	// -25	
		
		System.out.println("Z".compareTo("A")); // 25
		
		System.out.println("K".compareTo("K")); // 0
	}
}



Comparator
----------
Comparator is an interface which is present in java.util package.

It contains two methods i.e compare() and equals() method.

If we depends upon customized sorting order then we need to use Comparator interface.e

ex:
	public int compare(Object obj1,Object obj2)

	It will return +ve if obj1 comes before obj2.
	It will return -ve if obj1 comes after obj2.
	it will return 0 if both objects are same.

Implementation of equals() method is optional because this method present in Object and it is available to the class through inheritance.
	

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		System.out.println(ts);
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return 1;
		else if(i1>i2)
			return -1;
		else
			return 0;
	}
}



ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args) 
	{
		TreeSet<Integer> ts=new TreeSet<Integer>(new MyComparator());
		ts.add(10);
		ts.add(1);
		ts.add(5);
		System.out.println(ts);
	}
}
class MyComparator implements Comparator 
{
	public int compare(Object obj1,Object obj2)
	{
		Integer i1=(Integer)obj1;
		Integer i2=(Integer)obj2;
		
		if(i1<i2)
			return -1;
		else if(i1>i2)
			return 1;
		else
			return 0;
	}
}





































































































































