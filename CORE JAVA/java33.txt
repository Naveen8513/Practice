Enum 
=====
Enum concept introduced in 1.5v.

Enum is a group of named constants.

Using enum we can create our own datatype called enumerated datatype.

When compare to old language enum, java enum is more powerful.

We can declare enum as follow.

syntax:
------
	enum   enumtype_name
	{
		value1,value2,.....,valueN
	}

ex:
----
	enum Months
	{
		JAN,FEB,MAR	
	}

Internal implementation of enum
-------------------------------
Every enum internally consider as class concept and extended with java.lang.Enum class.

Every enum constant is reference variable of enum type.

ex:


enum  Months			final class Months extends java.lang.Enum 	
{				{
	JAN,FEB,MAR	==>		public static final Months JAN=new Months();
}					public static final Months FEB=new Months();
					public static final Months MAR=new Months();
				}


Declaration and Usage of Enum
--------------------------------
enum Months
{
	JAN,FEB,MAR
}
class Test  
{
	public static void main(String[] args) 
	{
		Months m=Months.JAN;
		System.out.println(m); // JAN 
	}
}
	

ex:
---
enum Months
{
	JAN,FEB,MAR
}
class Test  
{
	public static void main(String[] args) 
	{
		Months m=Months.MAR;
		
		switch(m)
		{
			case JAN: System.out.println("January"); break;
			case FEB: System.out.println("February"); break;
			case MAR: System.out.println("March"); break;
		}
	}
}
	
java.lang.Enum
---------------
The power to enum will be inherited from java.lang.Enum class.

It contains following two methods.

1) values() 
----------
	It will return group of constants from enum.

2) ordinal() 
------------
	It will return ordinal number.

ex:
----
enum Months
{
	JAN,FEB,MAR
}
class Test  
{
	public static void main(String[] args) 
	{
		Months[] m=Months.values();
		
		//for each loop
		for(Months m1:m)
		{
			System.out.println(m1+" ------------ "+m1.ordinal());
		}
	}
}
	
When compare to old language enum , java enum is more powerful because in addition to constants we can declare variables, methods and constructors.

ex:
---
enum Week
{
	MON,TUE,WED,THU,FRI,SAT,SUN;
	
	Week()
	{
		System.out.println("constructor");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Week w=Week.TUE;
	}
}

ex:
---
enum Drinks
{
	COLA,CAMPA,PEPSI;
	
	static int i=100;
	
	public static void main(String[] args)
	{
		System.out.println(i);
	}
}


Wrapper classes
===============
The main objective of wrapper classes are.

1) To wrap primitive type to wrapper object and vice versa.

2) To define several utility methods.

ex:
	primitive type			wrapper class
	---------------			---------------
	byte				Byte
	short				Short
	int				Integer
	long				Long	
	float				Float
	double				Double 
	boolean				Boolean 
	char 				Character 

constructor
-----------
There are two ways to create object for wrapper classes. One will take corresponding primitive as an argument and another takes corresponding String as an argument.

ex:
	Wrapper class			constructor
	---------------			------------
	Byte				byte or String 
	Short				short or String 
	Integer				int or String 
	Long				long or String
	Float				float or String 
	Double				double or String 
	Boolean				boolean or String 
	Character			char 
	

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i1=new Integer(10);
		System.out.println(i1);
		
		Integer i2=new Integer("20");
		System.out.println(i2);
	}
}


ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Boolean b1=new Boolean(true);
		System.out.println(b1);
		
		Boolean b2=new Boolean("false");
		System.out.println(b2);
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Character ch=new Character('a');
		System.out.println(ch); //a
	}
}


Utility methods
===============

1) parseXxx()
-------------
It is used to convert string type to primitive type.

ex:
--
class Test 
{
	public static void main(String[] args)
	{
		String str="23";
		
		int i=Integer.parseInt(str);
		System.out.println(i); //23
		
		long l=Long.parseLong(str);
		System.out.println(l); //23
		
		float f=Float.parseFloat(str);
		System.out.println(f); //23.0
		
		double d=Double.parseDouble(str);
		System.out.println(d); //23.0
	}
}


2) toString()
--------------
It is used to convert wrapper object to String type.

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		Integer i=new Integer(10);
		
		String str= i.toString();
		
		System.out.println(str); //10
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		int i=10;
		
		String str= i.toString();
		
		System.out.println(str); // C.T.E 
	}
}


Q) Write a java program to perform sum of two binary numbers?

input:
	1010
	0101
output:
	1111

ex:

import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the first binary : ");
		String binary1=sc.next(); //1010
		
		System.out.println("Enter the second binary :");
		String binary2=sc.next(); //0101
		
		//convert binary to decimal 
		int a=Integer.parseInt(binary1,2);
		int b=Integer.parseInt(binary2,2);
		
		int c=a+b;
		
		//convert decimal to binary
		String result=Integer.toBinaryString(c);
		System.out.println(result);
	}
}



ex:


class Test 
{
	public static void main(String[] args)
	{
		char ch='a';
		
		String s=Character.toString(ch);
		
		System.out.println(s);
	}
}




















































































