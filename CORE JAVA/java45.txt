Java 8 Features
================

Functional interface
====================
Functional interface introduced in Java 8 version.

Interface which contains only one abstract method is called functional interface.

It can have any number of default methods and static methods.

It is also known as SAM interface or Single Abstract Method interface.

The main objective of functional interface is to achieve functional programming.

ex:
	a = f1(){} 

	f1(f2(){})
	{
	}

@FunctionalInterface annotation is used to declare functional interface and it is optional.

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}
class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
	}
}


ex:
----
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class Test
{
	public static void main(String[] args)
	{
		A a=new A()
		{
			public void m1()
			{
				System.out.println("From M1 Method");
			}
		};
		a.m1();
	}
}


Lamda Expression
================
Lamda expression introduced in Java 8 version.

Lamda expression is used to concise(reduce) the code.

We can use lamda expression when we have functional interface.

Lamda expression consider as method.

The main objective of lamda expression is to achieve functional programming.

Lamda expression does not allow name, returntype and modifier.

ex:
	Java Method 
	------------
		public void m1()
		{
			System.out.println("Hello World");
		}

	Lamda expression
	----------------
		()->
		{
			System.out.println("Hello World");
		};
	

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract void m1();
}
class Test
{
	public static void main(String[] args)
	{
		A a=()->
			{
					System.out.println("M1 Method");
			};
			
		a.m1();
	}
}


ex:
---
@FunctionalInterface 
interface A 
{
	public abstract void m1(int i,int j);
}
class Test
{
	public static void main(String[] args)
	{
		A a=(int i,int j)->
			{
					System.out.println(i+j);
			};
			
		a.m1(10,20);
	}
}

ex:
---
@FunctionalInterface 
interface A 
{
	public abstract int m1(int i,int j);
}
class Test
{
	public static void main(String[] args)
	{
		A a=(int i,int j)->
			{
					return i+j;
			};
			
		System.out.println(a.m1(20,30));
	}
}


Default methods in interface
===========================
Java provides facility to declare default methods in interface from Java 8 version.

If we declare an method inside the interface and tagged with default keyword is called default method.

Default method is a non-abstract method.

Default methods can be override.

ex:
----
interface A 
{
	public abstract void m1();
	
	default void m2()
	{
		System.out.println("M2-Method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
}

class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
		a.m2();
	}
}

ex:
---
interface A 
{
	public abstract void m1();
	
	default void m2()
	{
		System.out.println("M2-Method");
	}
}
class B implements A 
{
	public void m1()
	{
		System.out.println("M1-Method");
	}
	
	public void m2()
	{
		System.out.println("Override-M2-Method");
	}
}

class Test
{
	public static void main(String[] args)
	{
		A a=new B();
		a.m1();
		a.m2();
	}
}

To achieve multiple inheritance in java we need to use default methods of an interface.

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1-Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1-Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		System.out.println("Middle-M1-Method");
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1-Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1-Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		Right.super.m1();
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1-Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1-Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		Left.super.m1();
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}

ex:
---
interface Right 
{
	default void m1()
	{
		System.out.println("Right-M1-Method");
	}
}
interface Left 
{
	default void m1()
	{
		System.out.println("Left-M1-Method");
	}
}
class Middle implements Right,Left 
{
	public void m1()
	{
		Right.super.m1();
		Left.super.m1();
	}
}
class Test 
{
	public static void main(String[] args)
	{
		Middle m=new Middle();
		m.m1();
	}
}


static methods in interface
===========================
Java provides facility to declare static methods in interface from Java 8 version.

If we declare an method inside the interface and tagged with static keyword is called static method.

Static method is a non-abstract method.

Static methods can't be override.

ex:
---
interface A 
{
	static void m1()
	{
		System.out.println("M1-Method");
	}
}

class Test 
{
	public static void main(String[] args)
	{
		A.m1();
	}
}


Stream API 
==========
Stream is an interface which is present in java.util.stream package.

Stream API is used to perform bulk operations on Collections.

Stream API is used to process the objects from Collections.

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		List<Integer> newList=list.stream().filter(i->i%2==0).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		List<Integer> newList=list.stream().filter(i->i%2!=0).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
--
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		long odd=list.stream().filter(i->i%2!=0).count();
		
		System.out.println(odd);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		List<Integer> newList=list.stream().map(i->i+10).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		List<Integer> newList=list.stream().sorted().collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		List<Integer> newList=list.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());
		
		System.out.println(newList);
	}
}

ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		long minimum=list.stream().min((i1,i2)->i1.compareTo(i2)).get();
		
		System.out.println(minimum);
	}
}


ex:
---
import java.util.*;
import java.util.stream.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		long maximum=list.stream().max((i1,i2)->i1.compareTo(i2)).get();
		
		System.out.println(maximum);
	}
}

forEach() Method
==================
A forEach() method introduced in Java 8 version.

It is used to iterate the objects from Collections.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,3,8,4,9);
		
		list.forEach(element-> System.out.print(element+" "));
	}
}

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		Map<Integer,String> map=new LinkedHashMap<Integer,String>();
		map.put(1,"one");
		map.put(2,"two");
		map.put(3,"three");
		
		map.forEach((key,value)-> System.out.println(key+"="+value));
	}
}


Method Reference (::)
======================
Method reference introduced in Java 8 version.

Method reference is a special type of lambda expression.

ex:
---
import java.util.*;
class Test 
{
	public static void main(String[] args)
	{
		List<Integer> list=Arrays.asList(5,7,1,9,2,3);
		
		list.forEach(System.out::println);
	}
}


Interview Question
==================

Q) Write a java program to display employee records in ascending order of employee id?

import java.util.*;
import java.util.stream.*;

class Employee
{
	private int empId;
	private String empName;
	private double empSal;
	
	//parameterized constructor 
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		
		list.add(new Employee(104,"Jack",4000d));
		list.add(new Employee(101,"Nancy",1000d));
		list.add(new Employee(103,"Jose",3000d));
		list.add(new Employee(102,"Linda",2000d));
		
		List<Employee> newList=list.stream().sorted(Comparator.comparingInt(Employee::getEmpId)).collect(Collectors.toList());
		
		newList.forEach(employee-> System.out.println(employee.getEmpId()
			+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}

Q) Write a java program to display employee records in ascending order of employee name?

import java.util.*;
import java.util.stream.*;

class Employee
{
	private int empId;
	private String empName;
	private double empSal;
	
	//parameterized constructor 
	Employee(int empId,String empName,double empSal)
	{
		this.empId=empId;
		this.empName=empName;
		this.empSal=empSal;
	}
	
	public int getEmpId()
	{
		return empId;
	}
	public String getEmpName()
	{
		return empName;
	}
	public double getEmpSal()
	{
		return empSal;
	}
}
class Test 
{
	public static void main(String[] args)
	{
		List<Employee> list=new ArrayList<Employee>();
		
		list.add(new Employee(104,"Jack",4000d));
		list.add(new Employee(101,"Nancy",1000d));
		list.add(new Employee(103,"Jose",3000d));
		list.add(new Employee(102,"Linda",2000d));
		
		List<Employee> newList=list.stream().sorted(Comparator.comparing(Employee::getEmpName)).collect(Collectors.toList());
		
		newList.forEach(employee-> System.out.println(employee.getEmpId()
			+" "+employee.getEmpName()+" "+employee.getEmpSal()));
	}
}


Garbage Collector
=================
It is a daemon thread which is responsible to destroy unused and useless object from java.

There are two ways to call garbage collector in java.

1) System.gc()

2) Runtime.getRuntime().gc()

ex:
---

class Test 
{
	int i=10;
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		System.out.println(t1.i); // 10
		
		t1=null;
		System.gc();
	}
	
	public void finalize()
	{
		System.out.println("Method Called");
	}
}

ex:
---

class Test 
{
	int i=10;
	
	public static void main(String[] args)
	{
		Test t1=new Test();
		System.out.println(t1.i); // 10
		
		t1=null;
		Runtime.getRuntime().gc();
	}
	
	public void finalize()
	{
		System.out.println("Method Called");
	}
}









































































































































