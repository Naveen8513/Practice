Q) Write a java program to display the string in a given format?

input:
	ABBCCCDDDD

output:
	A1B2C3D4

ex:

class  Test 
{
	public static void main(String[] args) 
	{
		String str="ABBCCCDDDD";
		
		int count=1;
		
		StringBuffer sb=new StringBuffer();
		
		for(int i=0;i<str.length();i++)
		{
			if(i<str.length()-1 && str.charAt(i)==str.charAt(i+1))
			{
				count++;
			}
			else
			{
				sb.append(str.charAt(i)).append(count);
				count=1;
			}
		}
		
		System.out.println(sb.toString());
	}
}

Q) Write a java program to multiply two arrays?

input:
	5 8 2  
	2 6

output:
	15132 (582*26)

ex:

class  Test 
{
	public static void main(String[] args) 
	{
		int[] arr1={5,8,2};
		int[] arr2={2,6};
		
		//caller method
		int a=Integer.parseInt(arrayToString(arr1));
		int b=Integer.parseInt(arrayToString(arr2));
		System.out.println(a*b);
	
	}
	//callie method
	public static String arrayToString(int[] arr)
	{
		StringBuffer sb=new StringBuffer();
		
		for(int i:arr)
		{
			sb.append(i);
		}
		
		return sb.toString();
	}
}


Q) Write a java program to count number of 2's present in a given number?

input:
	22

output:
	6 (2,12,20,21,22)

ex:
----
class  Test 
{
	public static void main(String[] args) 
	{
		int num=22;
		
		StringBuffer sb=new StringBuffer();
		
		for(int i=1;i<=num;i++)
		{
			sb.append(i);	
		}
		
		//counting number of 2's 
		int count=0;
		for(int i=0;i<sb.length();i++)
		{
			int n=Character.getNumericValue(sb.charAt(i));
			if(n==2)
			{
				count++;
			}
		}
		
		System.out.println(count);
	}

}

Q) Write a java program to encode a given string?

input:
	1106

output:
	AAJF

ex:

class  Test 
{
	public static void main(String[] args) 
	{
		String str="1106";
		
		//caller method 
		System.out.println(encodeString(str));
	}
	//callie method 
	public static  String  encodeString(String str)
	{
		StringBuffer sb=new StringBuffer();
		
		for(int i=0;i<str.length();i++)
		{
			int n=Character.getNumericValue(str.charAt(i));
			
			if(n>0)
			{
				sb.append((char)('A'+ n - 1));
			}
			else
			{
				int k=Integer.parseInt(str.substring(i-1,i+1));
				sb.append((char)('A'+ k - 1));
			}
			
		}
		
		return sb.toString();
	}

}

StringBuilder
=============
StringBuilder is exact same as StringBuffer with following differences.

StringBuffer						StringBuilder
-------------------					----------------
Every method present in StringBuffer is			No method present in StringBuilder is  
synchronized.						synchronized.

At a time only one thread is allowed to 		Multiple threads are allowed to operator 
operator on StringBuffer object.Hence StringBuffer	on StringBuilder object.Hence StringBuilder
is thread safe.						is not thread safe.

Waiting time of a thread will increase			There is no waiting time relatively 
relatively performance is low.				performance is high.

It is introduced in 1.0v.				It is introduced in 1.5v.


Note:
-----
If our content not change frequently then we need to use String.

If our content change frequently where thread safety is required then we need to use StringBuffer.

If our content change frequently where thread safety is not required then we need to use StringBuilder.


StringTokenizer
================
StringTokenizer is a class which is present in java.util package.

It is used to tokenize the string irrespective of regular expression.

We can create StringTokenizer object as follow.

syntax:
------
	StringTokenizer st=new StringTokenizer(String str,RegularExpression  regEx);

StringTokenizer class contains following methods.

ex:
	public boolean hasMoreTokens()
	public String nextToken()
	public boolean hasMoreElements();
	public Object nextElement();
	public int countTokens()


ex:
---
import java.util.StringTokenizer;
class  Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class");
		
		System.out.println(st.countTokens()); // 4 
	}
}
Here default regular expression is space.

ex:
---
import java.util.StringTokenizer;
class  Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");
		
		System.out.println(st.countTokens()); // 4 
	}
}

ex:
---
import java.util.StringTokenizer;
class  Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreTokens())
		{
			String s=st.nextToken();
			System.out.println(s);
		}
	}
}

ex:
----
import java.util.StringTokenizer;
class  Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("this is java class"," ");
		
		while(st.hasMoreElements())
		{
			String s=(String)st.nextElement();
			System.out.println(s);
		}
	}
}

ex:
---
import java.util.StringTokenizer;
class  Test 
{
	public static void main(String[] args) 
	{
		StringTokenizer st=new StringTokenizer("9,99,999",",");
		
		while(st.hasMoreElements())
		{
			String s=(String)st.nextElement();
			System.out.println(s);
		}
	}
}


Assignment
===========
Q) Write a java program to display palindrome strings?

input:
	racar is madam for bit

output:
	racar  madam 

ex:
---

class  Test 
{
	public static void main(String[] args) 
	{
		String str="racar is madam for bit";
		
		String[] sarr=str.split(" ");
		
		//for each
		for(String s:sarr)
		{
			StringBuffer sb=new StringBuffer(s);
			sb.reverse();
			
			if(s.equals(sb.toString()))
			{
				System.out.print(s+" ");
			}
		}
	}
}


Assignment
===========
Q) Write a java program to decode the string?

input:
	AAJF

output:
	1106

















































































