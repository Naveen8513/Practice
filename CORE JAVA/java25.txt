Q)
Write a java program to identify and print all elements in an array that are greater
than both their immediate predecessors and successors, considering the first and
last elements as having only one neighbor?

Input:
	1 3 20 4 75 0 90
Output:
	20 75 90

ex:
---
class Test
{
	public static void main(String[] args)
	{
		int[] arr={1,3,20,4,75,0,90};

		
		//first element 
		if(arr[0]>arr[1])
		{
			System.out.print(arr[0]+" ");
		}

		//Middle elements
		for(int i=1;i<arr.length-1;i++)
		{
			if(arr[i]>arr[i-1] && arr[i]>arr[i+1])
			{
				System.out.print(arr[i]+" ");
			}
		}


		//last element
		if(arr[arr.length-1]>arr[arr.length-2])
		{
			System.out.println(arr[arr.length-1]);
		}
	}
}

Q)

Write a java program to determine the smallest number of coins needed to total
86 rupees. Use the denominations provided in the array {1,2,5,10}?

Output:
	1 coin(s) of 1 rupee(s)
	1 coin(s) of 5 rupee(s)
	8 coin(s) of 10 rupee(s)

ex:
---
class Test
{
	public static void main(String[] args)
	{
		int[] denominations={1,2,5,10};
		int amount=86;

		//caller method 
		int[] coins=findMinimumCoins(denominations,amount);

		for(int i=0;i<coins.length;i++)
		{
			if(coins[i]>0)
			{
				System.out.println(coins[i]+" coin(s) of "+denominations[i]+" rupee(s)");
			}
		}
	}
	//callie method 
	public static int[] findMinimumCoins(int[] denominations,int amount)
	{
		int[] coinsCount=new int[denominations.length];

		for(int i=denominations.length-1;i>=0;i--)
		{
			coinsCount[i]= amount / denominations[i];

			amount = amount % denominations[i];
		}

		return coinsCount;
	}
}


Double Dimensional Array 
=========================
Double dimensional array is implemented based on array of arrays approach but not matrix form.

Double dimensional array is a combination of rows and columns.

The main objective of double dimensional array is a memory utilization.

We can use double dimensional array is used to develop business oriented applications, gaming applications, matrix type of applications and etc.

We can declare double dimensional array as follow.

syntax:
------
	datatype[][] variable_name=new datatype[rows][columns];

ex:
	int[][] arr=new int[3][3];

	Here we can store 9(3*3) elements in array.



Q) Write a java program to display array elements in matrix form?

import java.util.Scanner;
class Test 
{
	public static void main(String[] args)
	{
		Scanner sc=new Scanner(System.in);

		System.out.println("Enter the rows :");
		int rows=sc.nextInt();

		System.out.println("Enter the columns :");
		int cols=sc.nextInt();

		int[][] arr=new int[rows][cols];

		//insert the elements 
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.println("Enter the element :");
				arr[i][j]=sc.nextInt();
			}
		}

		//display elements
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.print(arr[i][j]+" ");
			}
			//new line
			System.out.println();
		}
	}
}

Q) Write a java program to find out square of a matrix?

input:
	1 2 3 
	4 5 6
	7 8 9 

output:
	1  4  9
	16 25 36
	49 64 81

ex:
----
class Test 
{
	public static void main(String[] args)
	{
		int[][] arr={
						{1,2,3}, 
						{4,5,6},
						{7,8,9} 
					};

		int rows=arr.length;
		int cols=arr[0].length;

		//display square of a matrix
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				System.out.print(arr[i][j]*arr[i][j]+" ");
			}
			//new 
			System.out.println();
		}
	}
}

Q) Write a java program to find sum of diagonal elements?

input:
	1 2 3 
	4 5 6
	7 8 9 

class Test 
{
	public static void main(String[] args)
	{
		int[][] arr={
						{1,2,3}, 
						{4,5,6},
						{7,8,9} 
					};

		int rows=arr.length;
		int cols=arr[0].length;

		//sum of diagonal elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i==j)
				{
					sum+=arr[i][j];
				}
			}
		}
		System.out.println("sum of diagonal elements is ="+sum);
	}
}

Q) Write a java program to find sum of upper triangle elements?

input:
	1 2 3 
	4 5 6
	7 8 9 

ex:

class Test 
{
	public static void main(String[] args)
	{
		int[][] arr={
						{1,2,3}, 
						{4,5,6},
						{7,8,9} 
					};

		int rows=arr.length;
		int cols=arr[0].length;

		//sum of diagonal elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i<j)
				{
					sum+=arr[i][j];
				}
			}
		}
		System.out.println("sum of upper triangle elements is ="+sum);
	}
}

Q) Write a java program to find sum of lower triangle elements?

input:
	1 2 3 
	4 5 6
	7 8 9 

ex:

class Test 
{
	public static void main(String[] args)
	{
		int[][] arr={
						{1,2,3}, 
						{4,5,6},
						{7,8,9} 
					};

		int rows=arr.length;
		int cols=arr[0].length;

		//sum of diagonal elements
		int sum=0;
		for(int i=0;i<rows;i++)
		{
			for(int j=0;j<cols;j++)
			{
				if(i>j)
				{
					sum+=arr[i][j];
				}
			}
		}
		System.out.println("sum of lower triangle elements is ="+sum);
	}
}


Anonymous Array
===============
Sometimes we will declare an array without name such type of nameless array is called anonymous array.

The main objective of anonymous array is a just for instance use.

We can declare anonymous array as follow.

ex:
	new int[]{10,20,30};
	new int[][]{{10,20,30},{40,50,60}};

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		//caller method
		sum(new int[]{10,20,30});
	}
	//callie method
	public static void sum(int[] arr)
	{
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		System.out.println(sum);
	}
}

ex:
---
class Test 
{
	public static void main(String[] args)
	{
		//caller method
		System.out.println(sum(new int[]{10,20,30}));
	}
	//callie method
	public static int sum(int[] arr)
	{
		int sum=0;
		for(int i:arr)
		{
			sum+=i;
		}
		return sum;
	}
}

Interview Program
===================
Q) Write a java program to display largest prime number in the list?

Input:
	2 3 4 5 7 9 11 12
Output:
	11


class Test 
{
	public static void main(String[] args)
	{
		int[] arr={2,3,4,5,7,9,11,12};

		int maxElement=Integer.MIN_VALUE;

		for(int n:arr)
		{
			boolean flag=true;
			for(int i=2;i<=n/2;i++)
			{
				if(n%i==0)
				{
					flag=false;
					break;
				}
			}
			if(flag==true)
			{
				if(n>maxElement)
				{
					maxElement=n;
				}
			}
		}

		System.out.println(maxElement);
	}
	
}














































































































































